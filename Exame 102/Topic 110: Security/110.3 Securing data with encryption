Terms and Utilities:


    > O QUE É CRIPTOGRAFIA?


- Uma forma de garantir que dados sejam enviados de um ponto a outro de maneira segura.

- Principais objetivos:
  * Autenticidade (do remetente)
  * Confidencialidade (da mensagem)
  * Integridade (da mensagem)
  * Irretratabilidade (do rementente)


    > SSH - SECURE SHELL


-> Protocolo de criptografia de rede.
-> Cria um canal seguro de comunicação entre 2 hosts, um cliente e um servidor.
-> Utiliza chaves assimétricas, ou seja, um conjunto de chaves públicas e privadas.
-> OpenSSH é a implementação mais comum.


    > SSH - CHAVES ASSIMÉTRICAS

A) Cada máquina possui sua chave pública e sua chave privada, que são associadas.

B) A "chave pública" será compartilhada com seu remetente, que utilizará para criptografar a mensagem antes de envia-l-a.

C) A "chave privada" é usada pelo destinatário para descriptografar os dados recebidos.

---> Exemplificando esse caso: 

Vamos imaginar que eu tenha a Maria e o João, a Maria tem a chave pública e a 
chave privada dela, e o joão tem a chave pública e a chave privada dele, se a Maria quiser enviar uma mensagem
para o João, o João vai ter que informar para a Maria qual é a chave pública dele, por exemplo,
Maria, quando vc quiser enviar uma mensagem para mim, usa a minha chave pública, e usa ela para criptografar
a mensagem que vc quer me enviar... Esse é o sistema que o SSH usa.

* De maneira bem geral isso que é importante  saber de criptografia e SSH.


     > OPENSSH NA PRÁTICA:


- O SSH funciona em cliente e servidor e todas as instalações quase sempre vem instalado o cliente.

- Mostrando o cliente openssh-client: *normalmente é o que vem padrão nos sistema. openssh-client

$dpkg -l | grep ssh
ii  libssh-4:amd64                             0.8.0~20170825.94fa1e38-1build1     amd64        tiny C SSH library (OpenSSL flavor)
ii  libssh-gcrypt-4:amd64                      0.8.0~20170825.94fa1e38-1build1     amd64        tiny C SSH library (gcrypt flavor)
ii  openssh-client                             1:7.6p1-4                           amd64        secure shell (SSH) client, for secure access to remote machines

1)  Arquivo de configuração do "client" ssh: #etc/ssh/ssh_config


2) Arquivo de configuração do "servidor" ssh: #etc/ssh/sshd_config


3) Conjunto de chaves públicas e privadas do servidor SSH:

-rw------- 1 root root    227 ago 28 17:41 ssh_host_ecdsa_key
-rw-r--r-- 1 root root    173 ago 28 17:41 ssh_host_ecdsa_key.pub
-rw------- 1 root root    399 ago 28 17:41 ssh_host_ed25519_key
-rw-r--r-- 1 root root     93 ago 28 17:41 ssh_host_ed25519_key.pub
-rw------- 1 root root   1675 ago 28 17:41 ssh_host_rsa_key
-rw-r--r-- 1 root root    393 ago 28 17:41 ssh_host_rsa_key.pub

-> Mostrando a minha chave privada:

$cd /etc/ssh# cat ssh_host_rsa_key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA3BSOH5TIuuoaCAvjwt1O/5myt0/t2YLsgpGs8RScgZpSnhdw
+mZ7o7ufcDBc6R6Q2Of8Hzj9l41OE5HQ0xI2o/w1Elf6jAqeBkaiwppCURYwlfdi
0pzfrUyVHzDPgEaMRdd5/PL+2j2trJ5TpItDxoFe8+TWT+eamblXYgdXaqTzffSJ
JpGYMopoBc30Qs9uDQO4Cm1CPgmuvnGfBx92SYOTHIo11n1D6Qy9211bfWs7ebrv
-----END RSA PRIVATE KEY-----

-> Mostrando a minha chave pública:

$cd /etc/ssh# ssh_host_ecdsa_key.pub
MIIEowIBAAKCAQEA3BSOH5TIuuoaCAvjwt1O/5myt0/t2YLsgpGs8RScgZpSnhdw
+mZ7o7ufcDBc6R6Q2Of8Hzj9l41OE5HQ0xI2o/w1Elf6jAqeBkaiwppCURYwlfdi


A) Fazendo uma conexão ssh simples, o que é mais usado normalmente:
$ssh lpi1@linux-server  (usuário do host remoto, @IP do host remoto ou o nome do host remoto).


B) Outra modelo de sintaxe de conexão de ssh:
$ssh -l lpi1 linux-server (pode se utilizar o nome do host remoto  ou o IP do host remoto).


C) Autenticando via ssh somente com o nome ou IP do host remoto:
$ssh linux-server (esse tipo de conexão serve somente se na máquina de destino tiver o mesmo usuário que na máquina de origem).


#know_hosts (arquivo que fica dentro do diretório .ssh no home do usuário).

  - no /home do usuário podemos ver que existe um diretório chamado .ssh
  - vai ter um arquivo que foi criado, chamado de know_hosts (que é a chave que ele recebeu da conexão destino).
  - o arquivo "know_hosts" vai guardando todas as chaves públicas que o client fez a conexão.


     > AUTENTICAÇÃO POR CHAVES COM SSH:


- Nesse modelo o usuário vai criar as próprias chaves públicas e privadas.

- Como que fazemos isso na prática?

1) Na máquina client, dentro do diretório .ssh

$ls -la
total 12
drwx------  2 absouza domain users 4096 ago 30 15:17 .
drwxr-xr-x 31 absouza domain users 4096 ago 30 15:03 ..
-rw-r--r--  1 absouza domain users  444 ago 30 15:17 known_hosts


2) Agora vamos criar as chaves públicas e privadas para o usuário:


$ssh-keygen (comando para criar as chaves com ssh)

- aqui podemos utilizar a opção "-t" que é o tipo, e "-b" que é o tamanho da chave:

$ssh-keygen -t rsa -b 1024
Generating public/private rsa key pair.
Enter file in which to save the key (/home/absouza/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/absouza/.ssh/id_rsa.
Your public key has been saved in /home/absouza/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:ex0ZeWuUqruqKP430v4iq8k4EqOtpKgRu8/mijcXTek absouza@wk2001876
The key's randomart image is:
+---[RSA 1024]----+
|                 |
|             . . |
|       .    o +  |
|      o      * . |
|.    +  S   + o  |
|oo  . E  . o o   |
|+=   o  . o .    |
|O**.+.=  . .     |
|%XO*+*o=o.o.     |
+----[SHA256]-----+


$ls -la 
total 20
drwx------  2 absouza domain users 4096 ago 30 15:31 .
drwxr-xr-x 31 absouza domain users 4096 ago 30 15:03 ..
-rw-------  1 absouza domain users  887 ago 30 15:31 id_rsa           * chave privada
-rw-r--r--  1 absouza domain users  231 ago 30 15:31 id_rsa.pub       * chave pública
-rw-r--r--  1 absouza domain users  444 ago 30 15:17 known_hosts


- Agora terei que pegar essa chave pública enviar para o servidor:

$cat id_rsa.pub (estou no diretório.ssh do meu home) 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDevj8YYSG/oGYzjdJA+TxEVZrg0lVUpOfSCunZ0Jc4rj5UPwff1RjgUAjseD5l4NHTSuJWcVZzrUPyj4Q80zEGuTCnnuB7qmGzIdP8Ju2arowJ7GsdwRumgdUpORIABNaaR6GJnvtk30nMbd+TemI2YoEjTQvKZyb9rCmL+tqUiw== amaury@maumau


- Na máquina do meu servidor, eu terei que ir no /home do meu usuário no servidor, do usuário que eu vou conectar.

- Criar o diretório ".ssh" e depois criar o arquivo "authorized_keys" (arquivo onde eu vou colocar a chave pública do ssh client).

- Apenas copiar a chave dentro desse arquivo, sair e salvar. *esse arquivo precisa ter permissão 600 (-rw------)

- Agora na máquina client eu vou fazer a conexão ssh:

$ssh lpi1@linux-server (apertando "enter" eu faço a conexão sem precisar da senha).

---------------------------------------------------------------------
CHAVES DO SISTEMA:                                                  -
                                                                    -
-rw------- 1 root root    227 ago 28 17:41 ssh_host_ecdsa_key       -
-rw-r--r-- 1 root root    173 ago 28 17:41 ssh_host_ecdsa_key.pub   -
-rw------- 1 root root    399 ago 28 17:41 ssh_host_ed25519_key     -
-rw-r--r-- 1 root root     93 ago 28 17:41 ssh_host_ed25519_key.pub -
-rw------- 1 root root   1675 ago 28 17:41 ssh_host_rsa_key         -
-rw-r--r-- 1 root root    393 ago 28 17:41 ssh_host_rsa_key.pub     -
---------------------------------------------------------------------

--------------------------------------------------------
CHAVES DO USUÁRIO:                                     -
                                                       -
-rw------- 1 amaury amaury 887 ago 30 20:29 id_rsa     -
-rw-r--r-- 1 amaury amaury 227 ago 30 20:29 id_rsa.pub -                                                                    -
--------------------------------------------------------


    > AUTENTICAÇÃO USANDO O PASSPHRASES:


- É uma senha das chaves.
- Vamos começar gerando novas chaves na máquina client:

$ssh-keygen -t rsa -b 1024 (colocar uma senha em passphrase no andamento do comando).

$ls -l
-rw------- 1 amaury amaury 966 ago 30 20:50 id_rsa
-rw-r--r-- 1 amaury amaury 227 ago 30 20:50 id_rsa.pub

- Agora tenho que pegar a chave pública que foi gerada e copiar para o servidor ssh (destino de onde quero conectar).

$cat id_rsa.pub  (peguei essa chave no diretório .ssh do meu usuário *ssh client)
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDIawaCVxHkzPXDXZztg0N4HLl8tMUqIkBkJ7lvCog+qm7HuDrGhY0rw8e6Y/dgk9Rz+MEYerehoPBnclY92h4yEZtNF/brCFdrRsJRDDw6R6093h/aduFHzRIMu3WmSRpAavdl3+usEk9mDcRseEyUO+dkw7F7ZkEk66Ibz7+ygw== amaury@maumau


#ssh-agent (esse processo/comando vai monitorar as senhas das minhas chaves).

$ssh-add (comando utilizado para incluir chaves de usuário no "ssh-agent").

$ssh-add 
Enter passphrase for /home/amaury/.ssh/id_rsa: 
Identity added: /home/amaury/.ssh/id_rsa (/home/amaury/.ssh/id_rsa)

- Feito isso eu já posso realizar a conexão via ssh:

$ssh lpi1@linux-server (ele vai acessar o destino e não vai pedir mais a senha, pois o processo ssh-agent fica 
analisando a senha da minha chave).


     > TÚNEL SSH


- o SSH pode ser utilizado como veículo para outras conexões. Essa técnica é conhecida como túnel de 
porta ou simplesmente túnel SSH.

- Comando utilizado para simular um túnel ssh:

$ssh -N -f -L 2323:10.0.0.112:23 lpi1@10.0.0.112

- A opção -f indica que o comando deve ser executado em segundo plano. A opção -N determina que não deve ser 
aberta uma sessão do shell na máquina remota.

- Após criar um túnel criptografado, outro programa poderá comunicar-se com a máquina remota em questão 
através desse túnel, de maneira que todos os dados estarão protegidos ao longo da conexão. 
Esse recurso é especialmente útil para programas que não possuem a funcionalidade de criptografia de dados.


     > X REMOTO VIA SSH


A) Técnica semelhante aos túneis SSH é abrir a janela de uma aplicação remota por meio de uma conexão SSH, usando a opção - X . 

B) Por exemplo, para exibir localmente o programa VirtualBox presente na máquina remota:


$ssh -X  luciano@192.168.1.1 "VirtualBox"


C) Podemos fazer uma conexão no servidor remoto para mostrar esse recurso:

- Eu vou entrar lá outro servidor via ssh, e vou rodar nesse servidor essa aplicação gráfica e ela será exibida aqui na minha tela.

$ssh -X lpi@10.0.0.112 "gnome-calculator"  (o gnome-calculator será mostrado aqui na minha tela, que eu executei em outro servidor).



    > COMO EXECUTAR UMA SÉRIE DE COMANDOS REMOTAMENTE:


- O comando abaixo executa os dois comandos, faz a conexão via ssh e retorna para a minha sessão:

$ssh lpi1@linux-server "ls -l /tmp; free" 



    > COMO ENVIAR E RECEBER ARQUIVOS COM SSH:


- Enviando o arquivo "usuariossistema" da minha máquina local para o server, via ssh:

$scp usuariossistema root@192.168.56.101:/tmp
root@192.168.56.101's password: 
usuariossistema                                                        100% 2572     2.7MB/s   00:00  


- Enviando outros dois arquivos da minha máquina local para o server, via ssh:

$scp Estudo2_LPIC-2.odt script_dominio.sh root@192.168.56.101:/tmp  (joga no /tmp)
root@192.168.56.101's password: 
Estudo2_LPIC-2.odt                                                     100%   24KB   1.4MB/s   00:00    
script_dominio.sh                                                      100% 1804   506.2KB/s   00:00 


- Agora, eu vou puxar um arquivo do servidor, buscar:

$scp root@192.168.56.101:/tmp/scripy-jandira /tmp (joga no /tmp da minha máquina local)
root@192.168.56.101's password: 
scripy-jandira                                                         100%  998     1.4MB/s   00:00  



       > PROTEGENDO OS DADOS COM ENCRIPTAÇÃO: GPG


#gpg


- Primeiramente vamos verificar se o programa está instalado:

$dpkg -l | grep gnupg
ii  gnupg                                      2.2.4-1ubuntu1.1                    amd64        GNU privacy guard - a free PGP replacement
ii  gnupg-l10n                                 2.2.4-1ubuntu1.1                    all          GNU privacy guard - localization files
ii  gnupg-utils                                2.2.4-1ubuntu1.1                    amd64        GNU privacy guard - utility programs



- Agora vamos gerar as nossas chaves, para isso vamos usar o comando:

$gpg --gen-key

- Para visualizar a minha chave, uso este comando:

$gpg --list-keys 
gpg: checando o trustdb
gpg: marginals needed: 3  completes needed: 1  trust model: pgp
gpg: profundidade: 0 válidas:   1 assinadas:   0 confiança: 0-, 0q, 0n, 0m, 0f, 1u
gpg: próxima checagem de banco de dados de confiabilidade em 2020-08-31
/root/.gnupg/pubring.kbx
------------------------
pub   rsa3072 2018-09-01 [SC] [expira: 2020-08-31]
      FA95D1FE175DE2089AA4D312E02550D571B01E39
uid           [final] Amaury <amaurybsouza@gmail.com>
sub   rsa3072 2018-09-01 [E] [expira: 2020-08-31]

- Também semelhante ao que eu tinha no .ssh, terei as chaves no diretório .gnupg

$~/.gnupg$ ls -l
total 12
drwx------ 2 amaury amaury 4096 abr 28 17:38 private-keys-v1.d
-rw------- 1 amaury amaury   32 abr 28 17:56 pubring.kbx
-rw------- 1 amaury amaury 1200 abr 28 17:56 trustdb.gpg
 
- Agora irei exportar as minhas chaves:

$gpg --export (utilizado para exportar a chave publica de um usuário. Determina qual chave publica será exportada).















#~/.gnupg/
