Terms and Utilities:

#O que é um script?

- É um arquivo texto que vai conter uma sequência de comandos, de operações, loops que vc executar a ação que o administrador deseja.

- criando um script chamado "primeiro-script.sh"

clear
echo "=========================== meu primeiro script =========================="
echo ""
uptime
free -m
echo ""
echo "fim do script"

- para executar esse script, podemos usar o comando source (esse comando faz com o programa, script, seja executado no shell atual)

$source vim primeiro-script.sh

- pode se usar o (ponto e espaço)

$. vim primeiro-script.sh

- podemos usar também a forma tradicional, que é ./vim primeiro-script.sh, mas essa forma não funciona, porque está sem permissão o arquivo, não tem permissão de execução.

$chmod +x  primeiro-script.sh

$./vim primeiro-script.sh (dessa forma ele vai abrir um novo bash, executar e retornar o valor)

- existe um outra opção, que é o comando exec:

$exec ./primeiro-script (esse comando executa o script, e ele vai fechar a minha sessão atual)

- se eu quiser colocar o script dentro da váriavel PATH:

$vim .profile (é lido toda vez que eu faço um login)
PATH="$HOME/estudolpi:$HOME/.local/bin:$PATH" (adicionar o $HOME/estudolpi no arquivo)

- depois dessa alteração, é necessário fazer login e assim, é possível executar o script em outro diretório do sistema, porque ele foi definido na váriavel PATH.

$cd /etc

etc$ primeiro-script.sh (o script é executado porque eu defini na váriave PATH o caminho do meu script)



-- lembrando que para o script entender qual o she-bang que eu estou utilizando, é necessário no inicio do script, adicionar se é um bin/bash ou ksh ou csh...

- exemplo: poderia usar no começo do script, #!/bin/csh, #!/bin/perl 

#parâmetros no shell ()

- posso usar no meu script um parametro, veja abaixo:

$ ./primeiro-script.sh 10 20 (10 e 20 seriam os parametros)

#!/bin/bash
clear
echo "=========================== meu primeiro script =========================="
echo ""
echo "o meu script se chama $0"
echo "esse script recebeu $# parametros que são, $1 $2"
echo ""
uptime
free -m
echo ""
echo "fim do script"

- entendendo algumas opções: $0 (retorna o nome do script), $# (retorna quantos parametros foram inseridos no script), 
$1 e $2 (primeiro parametro será mapeado no $1 e o segundo no $2)

$./primeiro-script.sh (excutando o script para mostrar esses valores)

=========================== meu primeiro script ==========================

o meu script se chama ./primeiro-script
esse script recebeu 2 parametros que são, 10 ricardo

 21:36:35 up  4:33,  1 user,  load average: 1,27, 1,38, 1,42
              total        used        free      shared  buff/cache   available
Mem:           7786        1886        3810         365        2089        5259
Swap:          2047           0        2047

fim do script

-- outro exemplo usando do script mas agora usando o comando read:

#!/bin/bash
clear
echo "=========================== meu primeiro script =========================="
echo ""
echo "o meu script se chama $0"
echo "esse script recebeu $# parametros que são, $1 $2"
echo ""
echo "por favor digite um número de 0 a 10:"
read VAR1  (o comando read espera por uma entrada do usuário que executou o programa, e VAR1 é a variavel que vai receber esse valor, exemplo 5)
echo "o valor digitado foi $VAR1"    (esse valor ficara armazenado nessa váriavel, VAR1)
echo ""
echo "fim do script"

-- outro exemplo usando o script mas agora usando váriaveis e passando valores nesses váriaveis:

1) Não é necessário declarar o tipo de váriavel, isso não tem  no shell.

2) Passando comandos dentro da váriavel, feito isso no script (VAR4=`cat /etc/passwd | wc -l`)

#!/bin/bash
clear
VAR2="Curso LPI1"
VAR3=99
VAR4=`cat /etc/passwd | wc -l`
VAR5=$(date +%H)
echo "=========================== meu primeiro script =========================="
echo ""
echo "o meu script se chama $0"
echo "esse script recebeu $# parametros que são, $1 $2"
echo ""
echo "por favor digite um número de 0 a 10:"
read VAR1
echo "o valor digitado foi $VAR1"
echo ""
echo "o arquivo /etc/passwd possui $VAR4 linhas. A hora atual é $VAR5"
echo ""
echo "fim do script"



-- Customização de shell script com if - Case - teste

- Vamos olhar o script feito pelo sistema, que é o arquivo /etc/profile:
  - blocos de if no /etc/profile

- Vamos ver a instrução test (que é um comando que existe no Linux)

- Exemplo de uma instrução do arquivo /etc/profile:
  - tem um if, e finaliza a instrução com o fi.
  - na primeira linha tem um teste, que vai retornar verdadeiro ou falso.
  - a opção -f significa se existe ou não o arquivo /etc/bash.bashrc.
  - esse teste pode ser feito usando colchetes [] ou usando o comando teste, veja -> if test -f /etc/bash.bashrc ]; then
  - testa se o arquivo existe, se for verdade, ele executa a linha abaixo -> . /etc/bash.bashrc

if [ -f /etc/bash.bashrc ]; then
      . /etc/bash.bashrc
    fi

- Vamos agora usar o comando test no bash, para exemplificar:

$test LPI1 = LPI1
$echo $? (mostra o sinal de saída do comando anterior $? se é 0 ou 1 0 para sucesso e 1 para erro)
0

$test LPI1 = LPI2
echo $?
1

$test -f /etc/profile (usando a opção -f para saber se o arquivo /etc/profile existe ou não)
$echo $?
0

$test -f /etc/profile2
$echo $?
1

$test 10 -gt 20 (quero saber se 10 é maior que 20) == gt 
echo $?
1

$test 10 -lt 20 (quero saber se 10 é menor que 20) == lt
echo $?
0

- Usando o primeiro-script para implementar instruções de comando if e else:

# TESTE DO IF
if test $VAR4 -gt $VAR3 ; then
        echo "O sistema tem mais de $VAR3 usuários"
else
        echo "O sistema tem menos de $VAR3 usuários"
fi

- Usando o primeiro-script para implementar instruções de comando case:

# TESTE DO CASE
echo ""
case $VAR1 in
        0)
                echo "o valor digitado foi 0"
        ;;
        1|2|3|4|5)
                echo "o valor digitado foi entre 1 e 5"
                sleep 3
        ;;
        *)
                echo "o valor digitado foi maior que 5"
esac


-- Vamos agora estudar um pouco do comando seq, abaixo alguns exemplos:

$seq 10 (esse comando vc passa um número para ele, e ele vai te dar uma sequência até esse número)
1
2
3
4
5
6
7
8
9
10

- esse comando é utilizado bastante no comando for.

-- Outro comando importante é o expr, que vem de expression, esse comando faz uma conta aritmética, muito usado para fazer calculos no shell.

$expr 1 + 2 (1 + 2  ele retorna 3)
3


-- vamos agora usar o comando for, para aprender a sintaxe:

# TESTE DO FOR
echo ""
echo "=================== LOOP DO FOR ===================="
for i in 1 2 3 4 5
do
        j=`expr $i + $VAR1`
        echo "$i + $VAR1 = $j"
done

-- outro exemplo do comando for, mas agora usando o seq junto com o for:

# TESTE DO FOR
echo ""
echo "=================== LOOP DO FOR ===================="
for i in `seq $1`
do
        j=`expr $i + $VAR1`
        echo "$i + $VAR1 = $j"
        sleep 1
done

- nesse exemplo acima, o $1 é o primeiro parametro digitado no começo do script.

-- usando o while para melhorar nosso script:

# TESTE DO WHILE
echo ""
echo "=================== LOOP DO WHILE =================="
while [ $VAR1 -le  $1 ]
do
        echo "O valor atual do \$VAR1 é: $VAR1"
        VAR1=`expr $VAR1 + 1`
        sleep 1
done

- nesse exemplo acima, while [ $VAR1 -le  $1 ] quer dizer: o valor do var1 for menos ou igual do que o valor informado no parametro.

-- usando o comando until: (semelhante ao comando while), até que essa informação seja verdadeiro faça a sequencia.

# TESTE DO UNTIL
echo ""
echo "=================== LOOP DO UNTIL =================="
until [ $VAR1 = 0 ]
do
        echo "O valor atual do \$VAR1 é: $VAR1"
        VAR1=`expr $VAR1 - 1`
        sleep 1
done



for aprendido

while aprendido

test aprendido

if aprendido

read aprendido

seq aprendido

exec aprendido
