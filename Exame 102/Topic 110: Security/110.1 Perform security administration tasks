Terms and Utilities:


   > ACESSO COMO ROOT: sudo, su e su -


1) #su (esse comando serve para mudar de um usuário para outro)

- Para um usuário comum entrar na conta de root, é usado o comando su. Será necessário informar a senha do usuário root 
para efetuar o login.

- Caso o usuário digite sudo su - basta acessar com a senha do próprio usuário.

- Exemplos:

$su lpi2 (eu vou logar com o usuário lpi2)
Password:

$su (sem usuário eu vou logar como root, tem que digitar a senha do root)
Password:

- Agora se eu utilizar "sudo su -" (significa que eu digito a senha do meu usuário e não a senha de root)


***Diferença entre "su" e o "su -" 


--> "su" (eu vou logar sem fazer o procedimento de login)

--> "su -" (eu vou logar fazendo o procedimento de login) *carrega as variáveis desse usuário, o ambiente desse usuário.

--> Exemplos:

$su lpi2 (vou assumir o usuário lpi2)
Password:

lpi2@linux:/home/lpi2$ (assim que eu logo ele mostra o /home do usuário, cai na pasta que eu estava antes)

- Assim que eu loguei ele mostra o home do usuário lpi2, ele não faz o procedimento de login para o novo usuário, ele caiu na 
pasta que eu estava.

- Ele não executa o ~/.profile, ~/.bash_profile, não inicia as variaveis que estão definidas para esse usuário lpi2.


- Agora digitando $su - (ele vai funcionar como se fosse um login com o usuário lpi2)

$su - lpi2 
Password:


#su -c (esse comando é usado quando eu não tenho autoridade de acesso é, sendo assim podemos usar o su -c)

- É necessário que eu tenha a senha do usuário root.


--> Exemplos:

$fdisk -l (só o usuário root pode executar este comando, por padrão).

- Agora se eu quiser executar esse comando com lpi1, eu posso usar:

$su -c "fdisk -l"  (eu vou executar esse comando e quando eu der enter ele vai pedir a senha do usuário root)

- vai executar o comando como se fosse o usuário root, depois quer terminar ele volta para o meu login, como lpi1.



2) #sudo (serve para executar um comando sem ter a senha do usuário de destino)

- Quando eu executo o seguinte comando abaixo:

$sudo su - (ele pergunta a senha do usuário lpi1, ele loga com a senha do usuário lpi1) *porque eu dei permissões para o usuário 
lpi1 logar como root.

A) Para que um usuário possa realizar tarefas de root, porém sem que tenha conhecimento da senha da conta root, existe o comando sudo.


--> Exemplos:

- O usuário5 não tem permissão para executar o comando abaixo, isso é tudo configurado no arquivo sudoers /etc/sudoers.

- O comando sudo é uma ferramenta que você vai configurar e informar quem tem permissão para fazer o que.

$sudo fdisk -l
[sudo] senha para usuario5: 
usuario5 não está no arquivo sudoers. Este incidente será relatado.



3) #/etc/sudoers (esse arquivo é utilizado para determinar as permissões de uso do comando sudo)

- pode dar permissões para usuários ou para grupos.
- normalmente é dada a permissão para grupos,  e coloca um usuário especifico dentro desse grupo.

- quando eu tenho o simbolo de porcentagem (%) é um grupo, veja: %sudo   ALL=(ALL:ALL) ALL

$cat /etc/sudoers
# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL                             * grupo sudo

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL                                  * grupo admin


* Significado importante:
- Os membros do grupo admin podem: %admin ALL=(ALL) ALL

a partir de qualquer terminal, utilizando qualquer usuário, executar todos os comando == %admin ALL=(ALL) ALL

- o usuário amaury faz parte do grupo sudo, por isso que esse usuário pode fazer qualquer coisa no sistema.

$grep amaury /etc/group
adm:x:4:syslog,amaury
sudo:x:27:amaury

- se eu quiser adicionar o "usuário5" no grupo de sudo, posso usar o comando usermod, adicionando esse usuário.
- a regra já está definida em /etc/sudoers.

* Exemplo de regra no /etc/sudoers

lpi2 ALL=/sbin/poweroff (o usuário lpi2 a partir de qualquer terminal pode executar esse comando, um poweroff).


* Outra forma de editar o arquivo /etc/sudoers é usar o comando "visudo"



    > INSPEÇÃO DE USUÁRIOS: who, w, last e lastlog


- que usuário está logado no momento.
- o que esse usuário está fazendo.
- quais foram as ultimas tentivas de login de cada usuário.
- para que o administrador tenha como investigar situações que tenham ocorrido no sistema, inclusive de segurança.


1) #who (mostra quem está logado nesse momento)

$who
amaury   :0           2018-08-22 18:29 (:0)

#who -a (com a opção -a mostra mais detalhes)

$who -a 
           inicialização do sistema 2018-08-22 18:28
           nível de execução 5 2018-08-22 18:29
amaury   ? :0           2018-08-22 18:29   ?          1641 (:0)


2) #w (mostra quem está logado e o que esse usuário está fazendo) *comando mais detalhado que o $who

$w
 21:31:37 up  3:02,  1 user,  load average: 0,65, 0,95, 1,20
USUARIO  TTY      DE               LOGIN@   OCIOSO JCPU   PCPU O QUE
amaury   :0       :0               18:29   ?xdm?   4:34   0.00s /usr/lib/gdm3/gdm-x-session --run-script env GNOME_

- com esse comando você pode monitorar usuários e sessões que estão consumindo muito da máquina.
- o w vai atualizando de acordo com os logs feitos no sistema.

LOGIN@   OCIOSO JCPU   PCPU O QUE
18:29   ?xdm?   4:34   0.00s


3) #last (mostra o histórico de logins na máquina)

$last
amaury   :0           :0               Wed Aug 22 18:29   still logged in
reboot   system boot  4.15.0-32-generi Wed Aug 22 18:28   still running
amaury   tty4                          Wed Aug 22 18:28 - down   (00:00)
amaury   :0           :0               Wed Aug 22 16:51 - down   (01:36)
reboot   system boot  4.15.0-32-generi Wed Aug 22 16:51 - 18:28  (01:37)
amaury   :0           :0               Tue Aug 21 16:48 - down   (06:13)
reboot   system boot  4.15.0-32-generi Tue Aug 21 16:48 - 23:01  (06:13)
amaury   :0           :0               Mon Aug 20 17:08 - down   (05:54)
reboot   system boot  4.15.0-32-generi Mon Aug 20 17:08 - 23:02  (05:54)
amaury   :0           :0               Sun Aug 19 09:51 - 23:04  (13:12)
reboot   system boot  4.15.0-32-generi Sun Aug 19 09:51 - 23:04  (13:12)
amaury   :0           :0               Sat Aug 18 08:53 - down   (14:45)


#lastb (verificar se houve tentativas mal sucedidas de logis no sistema)

$lastb
UNKNOWN  tty4                          Wed Aug 22 18:27 - 18:27  (00:00)

btmp inicia Wed Aug 22 18:27:59 2018

OBS: o comando $last tira essas informações dos arquivos: /var/log/wtmp e do /var/log/btmp.

$ls -l w*  (mostra todos os logins realizados no sistema)
-rw-rw-r-- 1 root utmp 51072 ago 22 18:29 wtmp
-rw-rw-r-- 1 root utmp 70272 ago  1 16:50 wtmp.1

- Para eu ler o conteúdo do arquivo wtmp.1, basta digitar o comando abaixo:  *arquivo que foi rotacionado, antigo.

$last -f wtmp.1

$ls -l bt*  (mostra os logins bloqueados)
-rw-rw---- 1 root utmp 384 ago 22 18:27 btmp
-rw-rw---- 1 root utmp   0 jul  1 16:07 btmp.1


#lastlog (pega todos os usuários do sistema e vai mostrar quando esse usuário fez login pela última vez)

$lastlog 
Nome de Usuário         Porta     De             Último
root                                       **Nunca logou**
daemon                                     **Nunca logou**
bin                                        **Nunca logou**
sys                                        **Nunca logou**
sync                                       **Nunca logou**
games                                      **Nunca logou**
man                                        **Nunca logou**
lp                                         **Nunca logou**
amaury           tty4                      qua ago 22 18:28:05 -0300 2018


- É interessante de se observar isso, porque eu não posso ter logins de usuários do sistema, 
como ter login com o usuário do CUPS, do servidor web, ou do proxy, não pode ter logins desses usuários.

- Para ver o último login do usuário amaury:

$lastlog -u amaury 
Nome de Usuário         Porta     De             Último
amaury           tty4                      qua ago 22 18:28:05 -0300 2018

- Para ver os últimos logins do usuário amaury:

$last amaury 
amaury   :0           :0               Wed Aug 22 18:29   still logged in
amaury   tty4                          Wed Aug 22 18:28 - down   (00:00)
amaury   :0           :0               Wed Aug 22 16:51 - down   (01:36)
amaury   :0           :0               Tue Aug 21 16:48 - down   (06:13)
amaury   :0           :0               Mon Aug 20 17:08 - down   (05:54)
amaury   :0           :0               Sun Aug 19 09:51 - 23:04  (13:12)
amaury   :0           :0               Sat Aug 18 08:53 - down   (14:45)


    > SENHAS DE USUÁRIOS: passwd, usermod, chage


- As senhas são um dos fatores mais importantes de um sistema, seja Windows, Linux.
- Cabe ao administardor instruir o usuário sobre a forma correta de usar a senha.
- É o usuário que não pode compartilhar a senha com outros usuários, tem que definir uma senha segura.


1) #chage (esse comando já foi estudado, ele defini a data de expiração, data de inatividade, de quanto em quanto
o usuário tem que trocar a senha dele)   *rever essa aula que foi estudada.

---- Opções do comando chage:
-l: Lista as definições atuais
-d DATA: Define forçadamente a data da última mudança de senha. -d0 força a expiração da senha
-E DATA: Define a data de expiração da conta
-I dias: Define o número de dias entre a data da expiração da senha e a desativação da conta
-m dias: Número mínimo de dias entre as trocas de senha
-M dias: Máximo de dias para a alteração de senha. Ou validade da senha.
-W dias: Define a partir de quantos dias antes da expiração da senha o usuário receberá avisos


A) Alterando para que a senha do usuário expire 10 dias após a troca da senha:

$chage -M 10 usuario6

B) Alterando para que o usuário possa trocar a senha apenas uma vez por dia:

$chage -m1 usuario6

C) Alterando para que a conta do usuário expire na data de hoje:

$chage -E "2017-05-12" usuario6

D) Tirando a data de expiração da conta do usuário:

$chage -E -1 usuario6

E) Forçando para que o usuário troque a senha no próximo login:

$chage -d 0 usuario6


2) #passwd (os mesmos recursos feito com o $chage, podem ser feitos com o passwd)

- As definições de cada usuário vão ficar no arquivo /etc/shadow    *as senhas e configurações de login do usuário.
- Vamos usar o usuário5 para trablalhar nesse tópico:

$chage -l usuario5 
Última mudança de senha					: ago 22, 2018
Senha expira					: nunca
Senha inativa					: nunca
Conta expira						: nunca
Número mínimo de dias entre troca de senhas		: 0
Número máximo de dias entre troca de senhas		: 99999
Número de dias de avisos antes da expiração da senha	: 7

A) $passwd -S (mostra o status do usuario5)

$passwd -S usuario5 
usuario5 P 08/22/2018 0 99999 7 -1

- P (significa que esse usuário possui uma senha, pode ter L, NP)
- pega essas informações do arquivo /etc/shadow.

$grep usuario5 /etc/shadow
usuario5:$6$QhbxUPXh$rmqhAwvXTdmShduW0sYlSK0ytmhvWkSqbi0gLt.saN9aIOgUZ0TRkJfkqZoxs3OAU5vyDVoQ7/2ut.U.kbmuZ.:17765:0:99999:7:::

B) $passwd -x (é a mesma coisa que o comando $chage -M) *defini o número "MÁXIMO" de dias que a senha permanecerá válida.

$passwd -x30 usuario5 (defini quando que a senha vai expirar, ou seja, daqui a 30 dias).
passwd: informação de expiração de senha alterada.

$chage -l usuario5 
Última mudança de senha					: ago 22, 2018
Senha expira					: set 21, 2018
Senha inativa					: nunca

C) $passwd -n (mesma coisa que o $chage -m) *defini o número "minimo" de dias que o usuário pode trocar a senha.

$passwd -n2 usuario5 
passwd: informação de expiração de senha alterada.

D) $passwd -w (utilizado para definir os dias anteriores ao fim da validade da senha em que será emitido um aviso a respeito). 
*chage -W

passwd -w4 usuario5 
passwd: informação de expiração de senha alterada.

E) $passwd -i (utilizado para definir inatividade ou tolerância de dias após a senha ter expirado até que a conta seja bloqueada).

F) $passwd -l (utilizado para bloquear uma conta de usuário especificada) *usermod -L

G) $passwd -u (utilizado para liberar uma conta de usuário bloqueada). *usermod -U



    > VERIFICAÇÕES DE PERMISSÕES: find, find / -perm -4000, find / -perm -2000


- Vamos ver algumas inspeções que o administrador pode fazer no sistema.
- A principal delas é com relação ao SUID/SGID


$ls -l /usr/bin/passwd 
-rwsr-xr-x 1 root root 59640 jan 25  2018 /usr/bin/passwd

- significa que qualquer usuário pode utilizar o comando passwd e funcionar como root. *pode ser um risco de segurança.
- por isso que o administrador de sistemas deve monitorar quais arquivos que possuem esse parâmetro, esse bit ativo (SUID, SGID) em arquivos.
- para encontrar arquivos que possuem esse bit no sistema, devemos usar o comando find.

1) #find (esse comando possue alfuns parâmetros que permitem procurar por arquivos com bit SUID e SGID ativos).


$find / -perm -4000 (esse procura por SUID) 

      ou 

$find / -perm -2000 (esse procura por SGID)


$find / -perm -4000 -ls (procura por todo o sistema e mostrar os arquivos que tem o S "-rwsr") *SUID
  7078036     44 -rwsr-xr-x   1 root     root        44528 jan 25  2018 /usr/bin/chsh
  7078380     24 -rwsr-xr-x   1 root     root        22520 jul 13 08:42 /usr/bin/pkexec
  7078034     76 -rwsr-xr-x   1 root     root        76496 jan 25  2018 /usr/bin/chfn
  7078660     40 -rwsr-xr-x   1 root     root        40344 jan 25  2018 /usr/bin/newgrp
  7077959     24 -rwsr-xr-x   1 root     root        22528 mar  9  2017 /usr/bin/arping
  7079160    148 -rwsr-xr-x   1 root     root       149080 jan 17  2018 /usr/bin/sudo
  7078718     60 -rwsr-xr-x   1 root     root        59640 jan 25  2018 /usr/bin/passwd



$find / \( -perm -2000 -o -perm -4000 \) -ls (procura por arquivos onde tem os dois bits ativos)  *SUID, SGID

- É recomendado que o administrador de sistemas crie um log disso, valide e compare isso.
- Ele pode executar uma vez por dia esse comando "find / -perm -4000 -ls", gera um arquivo de log e todo dia ele
gera o arquivo de log, podendo fazer um script que compare isso e mande um alerma caso haja uma diferença.


$find / -path /proc -prune -o -nouser -ls (procura por arquivos que não tem usuários associado a ele).

$find / -path /proc -prune -o -nouser -ls
5244852      4 drwxr-xr-x   2 62583    62583        4096 abr 28 14:37 /var/lib/private/systemd/timesync
  5244858      0 -rw-r--r--   1 62583    62583           0 jul 29 15:00 /var/lib/private/systemd/timesync/clock
find: ‘/run/user/1000/gvfs’: Permissão negada

"-path /proc -prune" (esse argunto do comando acima faz com que o find não procure por arquivos no /proc)


$find / -path /proc -prune -o -nogroup -ls (mostra todos os arquivos que o grupo definido não existe)

- É legal que o administrador de sistema faça esse tipo de monitoração, para que ele corrija caso exista uma inconsistência no sistema.



    > LIMITAÇÃO DE RECURSOS: ulimit, limite hard (H) limite soft (S).


- Usuários comuns podem provocar lentidão e até panes no sistema se utilizarem exageradamente os recursos da máquina.
- O uso da memória, a criação de arquivos e o número de processos também podem ser limitados. 
para esse fim é utilizado o comando ulimit.


1) #ulimit (utilizado para limitar o uso de memória, criação de arquivos e número de processos) *age na sessão do bash. 

- esse comando não deixa as tarefas fixas, vale somente para está sessão do bash, para ser permanente usa outros arquivos.

$ulimit -a (mostra os limites atuais da minha sessão do shell)

$ulimit -a 
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 30909
max locked memory       (kbytes, -l) 16384
max memory size         (kbytes, -m) unlimited


- Se eu digitar $ulimit -u (vai mostrar o número máximo de processos).
30909

  - Como que eu defino esse valor?

### Definição de valor máximo (hard) *representado pelo "H"

### Definição de valor atual (soft)  *representado pelo "S"


$ulimit -Hu 10000 (vou definir que o número máximo de processos para 10000)

$ulimit -u (digitando novamente, ele mostra o valor ativo no momento) *esse é o valor soft
30909

$ulimit -Su 500 (vai definir o valor atual como 500 de processos)

$ulimit -u (vendo a definição do comando acima).
500

$ulimit -Su 50000 (já executando esse comando, ele não vai permitir eu aumentar o número de processos, 
porque meu limite que eu tinha setado era "10000").
-su: ulimit: max user processses: cannot modify limit: Invalid argument

* ver os comandos acima para entender o cenário.

# Opções mais comuns de ulimit são:
-a: mostra os limites atuais;
-f: especifica o número máximo de arquivos que poderão ser na sessão do shell;
-u: o número máximo de processos disponíveis ao usuário;
-v: o montante máximo de memória virtual disponível ao shell.

- Para estabelecer em 100 o limite máximo de processos:

$ulimit -Su 100

- Para permitir que o usuário acresça esse limite até o máximo de 200:

$ulimit -Hu 200


2) #/etc/security/limits.conf (arquivo onde eu posso definir os limites, para usuários, grupos, é um ajuste permanente).

- Normalmente se usa esse arquivo para configurar os limites do sistema, o comando $ulimit é mais usado 
para verificar como estão os recursos de limitação do sistema.


     > VERIFICANDO PORTAS ABERTAS NO SISTEMA: 



- Vamos saber como monitorar os serviços e portas que estão sendo escutadas, utilizadas na rede.
- Com alguns comandos é possível ver o que está rodando na máquina (portas que estão abertas em máquinas da rede).

1) #netstat (esse comando possui várias opções, vamos abordas as principais)
- No exemplo, é possível observar algumas portas importantes que estão abertas, como o serviço DNS(porta 53) e SMTP(porta 25).

$netstat -anpt (mostrar todos os processos de conexões TCP)
Conexões Internet Ativas (servidores e estabelecidas)
Proto Recv-Q Send-Q Endereço Local          Endereço Remoto         Estado       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               OUÇA       1021/mysqld         
tcp        0      0 127.0.0.53:53           0.0.0.0:*               OUÇA       569/systemd-resolve 
tcp        0      0 127.0.0.1:631           0.0.0.0:*               OUÇA       743/cupsd           
tcp        0      0 0.0.0.0:25              0.0.0.0:*               OUÇA       1644/master         
tcp        0      0 192.168.0.107:52332     35.186.165.183:443      ESTABELECIDA 2145/chrome         
tcp        0      0 192.168.0.107:51036     173.194.206.188:5228    ESTABELECIDA 2145/chrome         
tcp        0      0 192.168.0.107:37798     151.101.20.175:443      ESTABELECIDA 2145/chrome   


- Para identificar quais portas estão abertas no sistema local:
- a opção "-p" mostra o PID, processos *1021/mysqld
- a opção "-t" mostra protocolos TCP e a opção "-u" mostra protocolos UDP.
- a principal opção no exemplo foi "-l" que determina a exibição das portas esperando por conexões no sistema local.


$netstat -nltp (mostra as conexões que estão em estado "listining")
Conexões Internet Ativas (somente servidores)
Proto Recv-Q Send-Q Endereço Local          Endereço Remoto         Estado       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               OUÇA       1021/mysqld         
tcp        0      0 127.0.0.53:53           0.0.0.0:*               OUÇA       569/systemd-resolve 
tcp        0      0 127.0.0.1:631           0.0.0.0:*               OUÇA       743/cupsd           
tcp        0      0 0.0.0.0:25              0.0.0.0:*               OUÇA       1644/master         
tcp6       0      0 ::1:631                 :::*                    OUÇA       743/cupsd           
tcp6       0      0 :::25                   :::*                    OUÇA       1644/master      


netstat -lt (mostrando as conexões usando os nomes dos serviços ao invés da porta).
Conexões Internet Ativas (somente servidores)
Proto Recv-Q Send-Q Endereço Local          Endereço Remoto         Estado      
tcp        0      0 localhost:mysql         0.0.0.0:*               OUÇA      
tcp        0      0 localhost:domain        0.0.0.0:*               OUÇA      
tcp        0      0 localhost:ipp           0.0.0.0:*               OUÇA      
tcp        0      0 0.0.0.0:smtp            0.0.0.0:*               OUÇA      
tcp6       0      0 ip6-localhost:ipp       [::]:*                  OUÇA      
tcp6       0      0 [::]:smtp               [::]:*                  OUÇA  


2) #lsof (mostra os programas e usuários estão utilizando uma determinada porta de serviço).

- toda conexão no sistema acaba abrindo um arquivo.

$lsof -i (mostra as conexões de rede abertas no sistema)
COMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
systemd-r  569 systemd-resolve   12u  IPv4  21774      0t0  UDP localhost:domain 
systemd-r  569 systemd-resolve   13u  IPv4  21775      0t0  TCP localhost:domain (LISTEN)
avahi-dae  723           avahi   12u  IPv4  24623      0t0  UDP *:mdns 
avahi-dae  723           avahi   13u  IPv6  24624      0t0  UDP *:mdns 
avahi-dae  723           avahi   14u  IPv4  24625      0t0  UDP *:49092 
avahi-dae  723           avahi   15u  IPv6  24626      0t0  UDP *:53699 
cupsd      743            root    6u  IPv6  24783      0t0  TCP ip6-localhost:ipp (LISTEN)
cupsd      743            root    7u  IPv4  24784      0t0  TCP localhost:ipp (LISTEN)
cups-brow  785            root    7u  IPv4  22274      0t0  UDP *:ipp 
ntpd       843             ntp   16u  IPv6  26686      0t0  UDP *:ntp 
ntpd       843             ntp   17u  IPv4  26689      0t0  UDP *:ntp 
ntpd       843             ntp   18u  IPv4  26693      0t0  UDP localhost:ntp 
ntpd       843             ntp   19u  IPv6  26695      0t0  UDP ip6-localhost:ntp 
ntpd       843             ntp   23u  IPv4  69743      0t0  UDP maumau:ntp 
ntpd       843             ntp   24u  IPv6  69746      0t0  UDP maumau:ntp 


$lsof -i :25 -n (o que está sendo escutado na porta SMTP).
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
master  1644 root   13u  IPv4  33396      0t0  TCP *:smtp (LISTEN)
master  1644 root   14u  IPv6  33397      0t0  TCP *:smtp (LISTEN)


3) #nmap (faz o escaneamento dos serviços e portas que estão abertas na máquina).
- posso informar o host, localhost ou uma máquina da rede.


$nmap localhost (faz o escaneamento das portas e dos serviços que estão ativos no sistema).

Starting Nmap 7.60 ( https://nmap.org ) at 2018-08-24 21:27 -03
Nmap scan report for localhost (127.0.0.1)
Host is up (0.0000050s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE
25/tcp   open  smtp
631/tcp  open  ipp
3306/tcp open  mysql


$nmap 10.0.0.1 (faz o escaneamento do meu roteador, máquina que eu uso como gateway).


$nmap -sT localhost (posso escanear especificamente TCP). *T TCP
Starting Nmap 7.60 ( https://nmap.org ) at 2018-08-24 21:31 -03
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000052s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE
25/tcp   open  smtp
631/tcp  open  ipp
3306/tcp open  mysql


4) #fuser (utilizado para identificar qual processo está utilizando determinado arquivo ou conexão de rede).


$fuser -u 25/tcp (mostra o dono do processo)
25/tcp:               1644(root)

$fuser -uv 25/tcp (mostra mais detalhes)
                     USUÁRIO     PID ACESSO COMANDO
25/tcp:              root       1644 F.... (root)master


