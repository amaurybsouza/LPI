Terms and Utilities:

### CRON ### é a opção mais usada para agendamentos em diversos segmentos do mercado.

- só funciona se o equipamento tiver ligado, se o agendamento rodar a cada hora e o servidor estiver desligado ele não executa o agendamento.


#/etc/cron.{d,daily,hourly,monthly,weekly}/ (outros diretórios relevantes, por mês, por dia, por hora, por semana).

Esses diretórios representam, respectivamente, a execução de hora em hora, diária, semanal e mensal.

/etc/cron.hourly# (nesse diretório tem scripts, tudo será executado toda hora).

/etc/cron.weekly# (vai rodar uma vez por semana tem programas e scripts).

/etc/cron.monthly# (scripts que serão executados uma vez por mês).

/etc/cron.d# (esse diretório é diferente, nele tem os agendamentos, semelhante ao /etc/crontab). Veja abaixo o modelo:

$cat popularity-contest 
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
31 14 * * *   root    test -x /etc/cron.daily/popularity-contest && /etc/cron.daily/popularity-contest --crond


#/etc/crontab (arquivo crontab geral do sistema, para agendamento de tarefas do sistema, só usuário root pode editar esse arquivo).

1) Nesse arquivo tem algumas váriaveis de ambiente, e agendamentos padrões do sistema, veja abaixo:

# m h dom mon dow user  command
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
#

2) Cada linha é um agendamento, o administrador do sistema pode adicionar outros agendamentos.

a) Sintaxe de agendamento: são 5 campos importantes.

m h dom mon dow user  command
17 *    * * *   root   cd / && run-parts --report /etc/cron.hourly

1º campo (em que minuto o comando será executado) * (todo minuto).
2º campo (que hora o comando será executado) * (significa toda hora).
3º campo (dia do mês que será executado, de 1 a 31 do mês).
4º campo (mês do ano, de 1 a 12, de janeiro a julho, só em janeiro).
5º campo (dia da semana, domingo, segunda, de segunda a sexta). 0 e 7 são domingos, temos a sequência, 1 segunda, 2 terça... até 6 que é sabado.

b) Exemplo:

* */4 * 5,6 1-5 /usr/local/bin/script_backup

1º campo (O exemplo acima executa o script_backup a cada quatro horas, de segunda à sexta, nos meses de maio e junho).

3) Temos também a determinação de qual usuário vai executar esse agendamento, comando, script.

4) Temos também os comandos, sequência de comandos, scripts, de backup, de envio de e-mail, de limpeza, gerar relatório.

- o comando run-parts executa tudo que está dentro do diretório.


#crontab (principal programa utilizado para fazer agendamentos de tarefas no linux).

- pode ser chamado de cron ou crontab, o processo se chama cron, alguns arquivos se chamam crontab como o /etc/crontab.

1) Com esse comando, é possível agendar um comando, um script, atividade para rodar a cada uma hora, a cada minuto, todo dia, toda segunda às 15.

2) É importante entender que a cron é um deamon (processo que precisa estar sempre em execução para que o agendamento funcione).

3) Opções do comando crontab:
• crontab -l usuário: mostra as tarefas agendadas pelo usuário;
• crontab -e usuário: edita o crontab do usuário no editor padrão do sistema;
• crontab -d usuário: apaga o crontab do usuário selecionado.


# COMO CADA USUÁRIO PODE FAZER SEU AGENDAMENTO:

- para isso cada usuário vai utilizar o comando crontab.
- cada usuário  incluindo o root, tem os agendamentos individuais.
- para ver esses agendamentos no sistema, temos que usar o comando $crontab -l 
- o root pode ver os agendamntos dele e de outros usuários.

$crontab -l (lista os agendamentos que eu tenho)
no crontab for root

$crontab -l -u absouza (lista os agendamentos do usuário absouza)

$crontab -e (edita os agendamentos, entra em modo de edição).

- Formato do agendamento (é a mesma coisa do arquivo /etc/crontab). Veja:
- dar sempre permissão de execução no script (+x).

#m h dia mes diasemana comando/script
15 13 1,10,20,30 * 1-5 /home/lpi1/Scripts/PrimeiroScript.sh
*/10 * * * * cd /tmp ; rm -f teste
0 0 1 1 * /usr/bin/fogos-de-artificio.sh
20 9-8 * * 1-5 /home/usuario/relatorio.sh


--> Entendendo os agendamentos acima:
1º linha (13:15, nos dias 1,10,20,30, em qualquer mês, nos dias da semana 1-5 (segunda a sexta)).
2º linha (executa essa sequência de comandos a cada 10 minutos, de qualquer dia, qualquer mês, qualquer dia da semana ele executa. O (/) indica a cada 10 minutos).
3º linha (executa no dia 1, minuto 0, hora 0).

$crontab -r (remove uma crontab).

$crontab -r -u lpi2 (remove a crontab do usuário lpi2).	
no crontab for lpi2


# ONDE QUE FICA ESSAS CONFIGURAÇÕES?

- se eu reniciar o sistema essas configurações da cron ficarão permanentes.

#/var/spool/cron/ (local onde ficam as crontabs, agendamentos de cada usuário do sistema).


# É POSSÍVEL CONTROLAR O USO DA CRONTAB POR MEIO DOS ARQUIVOS: /etc/cron.allow e /etc/cron.deny

#/etc/cron.allow (permite o uso de quem está listado)
- não tem esse arquivo por padrão no sistema.
Se /etc/cron.allow existir, apenas os usuários que nele constarem poderão agendar tarefas.

#/etc/cron.deny (proibe o uso de quem está listado)
- não tem esse arquivo por padrão no sistema.
Se /etc/cron.deny existir, os usuários nele existentes serão proibidos de agendar tarefas.

--> Se nenhum dos arquivos existir, todos os usuários poderão agendar tarefas.


### AT ###  O comando at programa a execução de um comando num momento futuro.


#at (outra opção para agendamentos, agenda uma vez apenas, em tal hora, executa o comando num momento futuro).


$at now + 2hours


#atq (mostra os jobs criados pelo at)

- Após terminar de inseri-los, é necessário pressionar Ctrl+d para encerrar o at e criar o agendamento.
- cada usuario pode definir o agendamento.

$atq ou at -l
1	Wed Jul 18 23:22:00 2018 a root

$at 13:20
warning: commands will be executed using /bin/sh
at> echo "hora do cafe"
at> <EOT>
job 2 at Thu Jul 19 13:20:00 2018

$atq
2	Thu Jul 19 13:20:00 2018 a root
1	Wed Jul 18 23:22:00 2018 a root

#atrm (remove um job do at)

$atrm 2 (remove o job de número 2)

#/etc/at.deny (já existe, criado como padrão, quem está listado nesse arquivo não pode usar o at).

- se não existir nem o at.deny e nem o at.allow, só o root consegue usar o at.

#/etc/at.allow (apenas os usuários listados vão conseguir usar o at).


### ANACRON ### garante que o agendamento seja executado caso a máquina esteja desligada, trabalha com o conceito de prazo para execução.


#anacron (garante que o agendamento seja executado caso a máquina esteja desligada, trabalha com o conceito de prazo para execução)

- é comum usar o anacron em máquinas desktop, que não ficam ligadas o tempo todo.
- no anacron só existe o agendamento por sistema e não por usuário como no cron.
- Se uma determinada tarefa deve ser realizada a cada sete dias, o anacron a executará assim que detectar o cumprimento do prazo, mesmo que tenha
sido após os exatos sete dias em questão.

#/etc/anacrontab (os agendamentos do anacron são armazenados nesse arquivo).

--> Modelo do arquivo:

# These replace cron's entries
1       5       cron.daily      run-parts --report /etc/cron.daily
7       10      cron.weekly     run-parts --report /etc/cron.weekly
@monthly        15      cron.monthly    run-parts --report /etc/cron.monthly


--> Os agendamentos são inseridos um por linha, cada um com os seguintes campos separados por espaço:

• Período em dias: Número inteiro determinando com qual frequência a tarefa deve ser executada, em dias. Podem ser utilizados os termos @daily, @weekly e @monthly para diariamente (equivalente a usar o número 1), semanalmente (equivalente a 7) e mensalmente (uma vez por mês, independente do número de dias do mês).

• Minutos de espera: Quantos minutos aguardar antes de executar uma tarefa. Se usado o número O, a tarefa será executada imediatamente, assim que o
término do prazo for detectado.

• Identificação: Uma descrição, sem espaços, usada para identificar a tarefa nos arquivos de log.

• Comando: O comando a ser executado pelo agendamento.
