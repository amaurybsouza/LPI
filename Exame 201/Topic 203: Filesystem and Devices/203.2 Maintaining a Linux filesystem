Terms and Utilities:

xfs_info, xfs_check, xfs_repair, xfsdump and xfsrestore
smartd, smartctl


### MANUTENÇÃO DO SISTEMA DE ARQUIVOS LINUX 



   > Alguns pontos importantes para considerar

- Primeiramente, vou criar uma nova partição para que eu posso usar ela como exemplo:

$ fdisk -l /dev/sdb
Disco /dev/sdb: 20,5 GiB, 22030106624 bytes, 43027552 setores
Unidades: setor de 1 * 512 = 512 bytes
Tamanho de setor (lógico/físico): 512 bytes / 512 bytes
Tamanho E/S (mínimo/ótimo): 512 bytes / 512 bytes
Tipo de rótulo do disco: dos
Identificador do disco: 0x5bf7c908

Dispositivo Inicializar   Início      Fim  Setores Tamanho Id Tipo
/dev/sdb1                   2048 10487807 10485760      5G 83 Linux
/dev/sdb2               10487808 20973567 10485760      5G 83 Linux



   > Formatando uma partição Linux:


1) mkfs (mkfs.*) (esse comando faz a formatação da partição Linux) 

- Duas formas de uso do comando mkfs:

$ mkfs.ext3 /dev/sdb2
mke2fs 1.43.4 (31-Jan-2017)
Creating filesystem with 1310720 4k blocks and 327680 inodes
Filesystem UUID: 06d79939-d21e-4740-8bb7-5f6ec0612535
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done


- mkfs -t ext3 /dev/sdb2
mke2fs 1.43.4 (31-Jan-2017)
/dev/sdb2 contains a ext3 file system
	created on Sun Aug  2 20:31:24 2020
Proceed anyway? (y,N)


- Opções de uso suportadas pela distro com o comando mkfs

$ mkfs
mkfs         mkfs.bfs     mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.ext4    mkfs.minix 


- Outro comando similar ao mkfs:

$ man mke2fs
mke2fs - create an ext2/ext3/ext4 filesystem



- Uma opção legal de se usar do comando mkfs é a opção -c:
- Essa partição faz a checagem de bad blocks antes de formatar a partição

$ mkfs.ext4 -c /dev/sdb2
mke2fs 1.43.4 (31-Jan-2017)
/dev/sdb2 contains a ext3 file system
	created on Sun Aug  2 20:31:24 2020
Proceed anyway? (y,N) y
Creating filesystem with 1310720 4k blocks and 327680 inodes
Filesystem UUID: 65bddf7e-0284-4aac-b577-2d25556c32ea
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Checking for bad blocks (read-only test): done                                                 
Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

- Ele vai checar se existe bad blocks, se existir ele vai avisar, e o correto seria não usar.


2) mkswap (formata a partição para ser usada como swap)


3) dumpe2fs (coletar informações, ele pega e mostra as informações sobre a partição/filesystem)

- Mostrando o uso mais utilizado, usando a opção -h:

$ dumpe2fs -h /dev/sdb2 | head 
dumpe2fs 1.43.4 (31-Jan-2017)
Filesystem volume name:   <none>
Last mounted on:          <not available>
Filesystem UUID:          65bddf7e-0284-4aac-b577-2d25556c32ea
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum
Filesystem flags:         signed_directory_hash 
Default mount options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue

-> legal que eu posso usar esse comando para fazer o fsck a cada 1 mês por exemplo.

- Verificando se existe bad blocks nessa partição:

$ dumpe2fs -b /dev/sdb2 
dumpe2fs 1.43.4 (31-Jan-2017) 


4) tune2fs (tunar, customizar o filesystem, listar as propriedades do filesystem)


- Criando uma descrição/label para a minha partição:

$ tune2fs -L "Aula de teste" /dev/sdb2
tune2fs 1.43.4 (31-Jan-2017)

$ tune2fs -l /dev/sdb2 | head 
tune2fs 1.43.4 (31-Jan-2017)
Filesystem volume name:   Aula de teste
Last mounted on:          <not available>
Filesystem UUID:          65bddf7e-0284-4aac-b577-2d25556c32ea
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum
Filesystem flags:         signed_directory_hash 
Default mount options:    user_xattr acl
Filesystem state:         clean


- Definindo a quantidade de mounts para essa partição:

$ tune2fs -c10 /dev/sdb2  
tune2fs 1.43.4 (31-Jan-2017)


$ tune2fs -l /dev/sdb2 | grep -i maxim
Maximum mount count:      10


- Aumentando o espaço reservado da partição, que normalmente é de 5%:
- Coloquei apenas 1%, esse espaço e visto apenas pelo root, usuário normal não pode escrever nele


$ tune2fs -m1 /dev/sdb2
tune2fs 1.43.4 (31-Jan-2017)
Setting reserved blocks percentage to 1% (13107 blocks)


- tune2fs -j (transforma uma partição ext2 em ext3) * journaling/principal diferença entre ext2 e ext3



5) badblocks (ele procura por bad blocks na partição, aí você deixa de usar esse espaço)
$ whatis badblocks
badblocks (8)        - search a device for bad blocks


- Gerando um arquivo com o comando badblocks sobre badblocks na partição:

$ badblocks -o arquivo /dev/sdb2


6)  fsck (fsck.*) (comando usado para checar e reparar a estrutura do filesystem)

$ whatis fsck
fsck (8)             - check and repair a Linux filesystem

$ fsck (posso usar como no comando mkfs)
fsck         fsck.cramfs  fsck.ext2    fsck.ext3    fsck.ext4    fsck.minix


- Posso usar também o comando "e2fsck" para partições ext2/ext3/ext4

- Como que eu uso o comando fsck:

$ fsck /dev/sdb2
fsck de util-linux 2.29.2
e2fsck 1.43.4 (31-Jan-2017)
Aula_de_teste: clean, 11/327680 files, 42078/1310720 blocks

$ fsck -t ext3 /dev/sdb2
fsck de util-linux 2.29.2
e2fsck 1.43.4 (31-Jan-2017)
Aula_de_teste: clean, 11/327680 files, 42078/1310720 blocks


- Forçando a chacagem do comando fsck com a opção -f:

$ fsck -f /dev/sdb2 -y (ele vai corrigir tudo que estiver de errado e vai passar direto sem perguntar com a opção -y)
fsck de util-linux 2.29.2
e2fsck 1.43.4 (31-Jan-2017)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
Aula_de_teste: 11/327680 files (0.0% non-contiguous), 42078/1310720 blocks


- Checando agora com a opção -c por badblocks:

$ fsck -f -c /dev/sdb2
fsck de util-linux 2.29.2
e2fsck 1.43.4 (31-Jan-2017)
Checking for bad blocks (read-only test): done                                                 
Aula_de_teste: Updating bad block inode.
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information

Aula_de_teste: ***** FILE SYSTEM WAS MODIFIED *****
Aula_de_teste: 11/327680 files (0.0% non-contiguous), 42078/1310720 blocks


OBS: só é possível executar o comando fsck em partição desmontada.



   > Btrfs (B-tree file system)

- Filesystem moderno
- Foco em tolerância a falhas e facilidade de administração
- Desenvolvido por um grupo de empresas, como: Oracle, Red Hat, Facebook...
- Usado pelo Facebook, TripAdvisor
- Será empregado no lugar dos ext3, ext4


- Vamos checar se no sistema tem suporte para esse filesystem:

$ cat /proc/filesystems | tail -n 4
	ext4
nodev	autofs
nodev	binfmt_misc
	btrfs

$ modprobe btrfs (tive que usar esse comando porque na compilação do kernel, ele estava disponível como módulo)

- Instalando as ferramentas do btrfs para que eu possa gerenciar o sistema:

$ apt install btrfs-tools -y

$ btrfs
btrfs               btrfsck             btrfs-debug-tree    btrfs-image         btrfs-select-super  btrfstune           
btrfs-calc-size     btrfs-convert       btrfs-find-root     btrfs-map-logical   btrfs-show-super    btrfs-zero-log


- Formatando uma partição como sendo btrfs:

$ mkfs.btrfs /dev/sdb3
btrfs-progs v4.7.3
See http://btrfs.wiki.kernel.org for more information.

Label:              (null)
UUID:               
Node size:          16384
Sector size:        4096
Filesystem size:    2.00GiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP             102.38MiB
  System:           DUP               8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  1
Devices:
   ID        SIZE  PATH
    1     2.00GiB  /dev/sdb3


$ lsblk -f
NAME   FSTYPE LABEL         UUID                                 MOUNTPOINT
sda                                                              
├─sda1 ext4                 4d8a74e7-adfe-440e-8f10-050e48099a93 /
├─sda2                                                           
└─sda5 swap                 9261dd6f-5839-4d26-8f56-6fe73575dbb6 [SWAP]
sdb                                                              
├─sdb1 ext4                 0849ccae-5119-4542-994b-f51a81c06af5 /opt/montagem
├─sdb2 ext4   Aula de teste 65bddf7e-0284-4aac-b577-2d25556c32ea 
├─sdb3 btrfs                5d8c2073-3c9d-46d1-a380-8cf54c4233b6 
└─sdb4 btrfs                6ae5e4f8-31e8-4d73-a62e-c2c18af62d96 
sr0



- Mostrando todas as partições que eu tenho marcadas como btrfs:

$ btrfs filesystem show
Label: none  uuid: 5d8c2073-3c9d-46d1-a380-8cf54c4233b6
	Total devices 1 FS bytes used 112.00KiB
	devid    1 size 2.00GiB used 228.75MiB path /dev/sdb3

Label: none  uuid: 6ae5e4f8-31e8-4d73-a62e-c2c18af62d96
	Total devices 1 FS bytes used 112.00KiB
	devid    1 size 2.00GiB used 228.75MiB path /dev/sdb4


- Agora montando uma partição para testar sub-volumes com btrfs:

$ mkdir /mnt/btrfs1

$ mount /dev/sdb2 /mnt/btrfs1
/dev/sdb3      btrfs         2097152   16704    1870016   1% /mnt/btrfs1


- Criando um sub-volume com btrfs:

$ btrfs subvolume create /mnt/btrfs1/sub1
Create subvolume '/mnt/btrfs1/sub1'


- Vendo os subvolumes criados:

$ btrfs subvolume list /mnt/btrfs1/
ID 257 gen 7 top level 5 path sub1
ID 258 gen 8 top level 5 path sub2
ID 259 gen 9 top level 5 path sub3


$ btrfs subvolume show /mnt/btrfs1/sub1/
/mnt/btrfs1/sub1
	Name: 			sub1
	UUID: 			2195669c-14a3-4e4d-ae3a-7971efaff663
	Parent UUID: 		-
	Received UUID: 		-
	Creation time: 		2020-08-03 21:27:27 -0300
	Subvolume ID: 		257
	Generation: 		7
	Gen at creation: 	7
	Parent ID: 		5
	Top level ID: 		5
	Flags: 			-
	Snapshot(s):


- Para montar um subvolume com btrfs:

$ mount -o subvolume=sub1 /dev/sdb3 /mnt/subvolume1/



   > Spnashot com btrfs:


$ btrfs subvolume snapshot /mnt/subvolume1/ /mnt/subvolume1/snap1


   > Criando um RAID1 com o fileystem btrfs:


$ mkfs.btrfs -d raid1 /dev/sdb3 /dev/sdb4
btrfs-progs v4.7.3
See http://btrfs.wiki.kernel.org for more information.

Label:              (null)
UUID:               
Node size:          16384
Sector size:        4096
Filesystem size:    4.00GiB
Block group profiles:
  Data:             RAID1           204.75MiB
  Metadata:         RAID1           204.75MiB
  System:           RAID1             8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  2
Devices:
   ID        SIZE  PATH
    1     2.00GiB  /dev/sdb3
    2     2.00GiB  /dev/sdb4


- O RAID1 significa que uma partição espelha a outra
- Criado o RAID1, contem dois devices, apenas um dispositivo.
- Montando tanto pelo /dev/sdb3 ou /dev/sdb4 ele monta apenas um, e reflete nos dois.


   > Converntendo uma partição de ext4 para btrfs:

- Primeiro devo verificar se a partição está desmontada:

$ lsblk -f
NAME   FSTYPE LABEL         UUID                                 MOUNTPOINT
sda                                                              
├─sda1 ext4                 4d8a74e7-adfe-440e-8f10-050e48099a93 /
├─sda2                                                           
└─sda5 swap                 9261dd6f-5839-4d26-8f56-6fe73575dbb6 [SWAP]
sdb                                                              
├─sdb1 ext4                 0849ccae-5119-4542-994b-f51a81c06af5 /opt/montagem
├─sdb2 ext4   Aula de teste 65bddf7e-0284-4aac-b577-2d25556c32ea 
├─sdb3 btrfs                066c2fee-3ff4-403c-9e44-c26382d60121 
└─sdb4 btrfs                066c2fee-3ff4-403c-9e44-c26382d60121 
sr0

- Vou usar a partição /dev/sdb2 que está marcada como ext4.

- Convertendo a partição:

$ btrfs-convert /dev/sdb2
create btrfs filesystem:
	blocksize: 4096
	nodesize:  16384
	features:  extref, skinny-metadata (default)
creating ext2 image file
creating btrfs metadatacopy inodes [o] [         2/        11]


- Verificando se deu certo:

$ lsblk -f
NAME   FSTYPE LABEL         UUID                                 MOUNTPOINT
sda                                                              
├─sda1 ext4                 4d8a74e7-adfe-440e-8f10-050e48099a93 /
├─sda2                                                           
└─sda5 swap                 9261dd6f-5839-4d26-8f56-6fe73575dbb6 [SWAP]
sdb                                                              
├─sdb1 ext4                 0849ccae-5119-4542-994b-f51a81c06af5 /opt/montagem
├─sdb2 btrfs  Aula de teste 5a41e529-14a3-4e74-8878-fa4b667364d3 
├─sdb3 btrfs                066c2fee-3ff4-403c-9e44-c26382d60121 
└─sdb4 btrfs                066c2fee-3ff4-403c-9e44-c26382d60121 
sr0



   > ZFS (Noção)

- Mantido pela Oracle
- OpenZFS: Alternativa de código aberto
- Foco na integridade dos dados
- Facilidade de gerenciamento
- Sistema de arquivos em Pools/Escalabilidade
- RAID

---
  
   > XFS

- Robusto e escalavel
- Trabalha bem com arquivos grandes
- Redimensionamento/Desfragmentação online
- Tamanho de blocos variáveis 

---

- Efetuando a instalação do filesystem XFS:

$ apt install xfsprogs xfsdump -y


- Vou usar a partição /dev/sdb4

$ fdisk -l /dev/sdb
Disco /dev/sdb: 20,5 GiB, 22030106624 bytes, 43027552 setores
Unidades: setor de 1 * 512 = 512 bytes
Tamanho de setor (lógico/físico): 512 bytes / 512 bytes
Tamanho E/S (mínimo/ótimo): 512 bytes / 512 bytes
Tipo de rótulo do disco: dos
Identificador do disco: 0x5bf7c908

Dispositivo Inicializar   Início      Fim  Setores Tamanho Id Tipo
/dev/sdb1                   2048 10487807 10485760      5G 83 Linux
/dev/sdb2               10487808 20973567 10485760      5G 83 Linux
/dev/sdb3               20973568 25167871  4194304      2G 83 Linux
/dev/sdb4               25167872 29362175  4194304      2G 83 Linux


- Formatando a partição /dev/sdb4 como sendo xfs:

$ mkfs.xfs /dev/sdb4 -f
meta-data=/dev/sdb4              isize=512    agcount=4, agsize=131072 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=0, rmapbt=0, reflink=0
data     =                       bsize=4096   blocks=524288, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal log           bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0


- Analisando agora a nova marcação do XFS:

lsblk -f
NAME   FSTYPE LABEL         UUID                                 MOUNTPOINT
sda                                                              
├─sda1 ext4                 4d8a74e7-adfe-440e-8f10-050e48099a93 /
├─sda2                                                           
└─sda5 swap                 9261dd6f-5839-4d26-8f56-6fe73575dbb6 [SWAP]
sdb                                                              
├─sdb1 ext4                 0849ccae-5119-4542-994b-f51a81c06af5 /opt/montagem
├─sdb2 btrfs  Aula de teste 5a41e529-14a3-4e74-8878-fa4b667364d3 
├─sdb3 btrfs                066c2fee-3ff4-403c-9e44-c26382d60121 
└─sdb4 xfs                  2711869f-4a95-4149-b413-835f7a361e4a 
sr0 


- Montando a partição:

$ df -T | grep -i sdb4
/dev/sdb4      xfs           2086912   35104    2051808   2% /mnt/xfs


- Mostrando informações sobre a partição:

xfs_info /mnt/xfs/
meta-data=/dev/sdb4              isize=512    agcount=4, agsize=131072 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1 spinodes=0 rmapbt=0
         =                       reflink=0
data     =                       bsize=4096   blocks=524288, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal               bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0


-  Similar ao FSCK temos o xfs_repair que faz o reparo:


$ whatis xfs_repair
xfs_repair (8)       - repair an XFS filesystem


$ whatis xfsdump
xfsdump (8)          - XFS filesystem incremental dump utility


$ whatis xfsrestore
xfsrestore (8)       - XFS filesystem incremental restore utility


   > Falando sobre o smart


- smart é um deamon que roda no sistema para ajudar a monitorar o HD, o dispositivo de armazenamento.
- ele procura erros no disco, ele faz a monitoração do disco, não é como o FSCK
- terá um deamon que vai ficar rodando no sistema e o client que o smartctl que fornece alguns comandos

- Fazendo a instalação desse recurso:

$ apt install smartmontools

- Trazendo informações do disco:

$ smartctl -i /dev/sdb
smartctl 6.6 2016-05-31 r4324 [x86_64-linux-4.9.0-13-amd64] (local build)
Copyright (C) 2002-16, Bruce Allen, Christian Franke, www.smartmontools.org

=== START OF INFORMATION SECTION ===
Device Model:     VBOX HARDDISK
Serial Number:    VB70bfcd76-80e06682
Firmware Version: 1.0
User Capacity:    22.030.106.624 bytes [22,0 GB]
Sector Size:      512 bytes logical/physical
Device is:        Not in smartctl database [for details use: -P showall]
ATA Version is:   ATA/ATAPI-6 published, ANSI INCITS 361-2002
Local Time is:    Wed Aug  5 21:34:14 2020 -03
SMART support is: Unavailable - device lacks SMART capability


- Processo em execução no sistema:

$ ps axu | grep smartd
root        8769  0.0  0.0  10780  5884 ?        Ss   21:31   0:00 /usr/sbin/smartd -n

- Possível acompanhar e gerenciar com o systemctl:

$ systemctl status smartd
● smartmontools.service - Self Monitoring and Reporting Technology (SMART) Daemon
     Loaded: loaded (/lib/systemd/system/smartmontools.service; enabled; vendor preset: enabled)
     Active: active (running) since Wed 2020-08-05 21:31:01 -03; 6min ago
       Docs: man:smartd(8)
             man:smartd.conf(5)
   Main PID: 8769 (smartd)
     Status: "Next check of 1 device will start at 22:01:01"
      Tasks: 1 (limit: 14083)
     Memory: 1.6M
     CGroup: /system.slice/smartmontools.service
             └─8769 /usr/sbin/smartd -n


- Arquivo de configuração:

$ vim /etc/smartd.conf


- Para usar ver mais opções desse recurso, usamos o comando smartctl:

$ smartctl -a /dev/sdb (mostra uma lista de testes que foi feita no disco)

$ smartctl -H /dev/sdb (faz um teste de verificação da saude do disco)






