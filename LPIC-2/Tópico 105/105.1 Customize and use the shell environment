The following is a partial list of the used files, terms and utilities:

# COMANDO: source (faz com que o comando seguinte seguinte, script,seja executado no bash local, e que não abra um novo bash)


- outra forma seria usar o . ("ponto e espaço")

$. script_variavel.sh 
o script lê e imprime o valor da variavel TESTE
 
O valor da variavel TESTE é: valor1

- usando o comando $source para executar o script:

$./script_variavel.sh 
o script lê e imprime o valor da variavel TESTE
 
O valor da variavel TESTE é:

$source script_variavel.sh 
o script lê e imprime o valor da variavel TESTE
 
O valor da variavel TESTE é: valor1

# COMANDO: alias (comando que permite criar atalhos, sinonimos de comando)

$alias dt="date + %H:%M" (criando um alias para o comando date chamado dt)

$dt
11:52 

$alias (sem argumento mostra todos os alias definidos no bash atual)
alias dt='date +%H:%M'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alF'
alias ls='ls --color=auto'
root@wk2001876:/home/absouza/estudo-LPI# 

# COMANDO: function

function (usado para criar uma sequencia rotinas, de comandos, loops, if, while)

1º) Primeira forma de declarar uma função:

$function funcao1 {             (exemplo de declaração de função)
> date;
> uptime;  
> uname -a;
> echo "fim da função"; 
> }

#set (para ver a definição da função que foi declarada)
funcao1 () 
{ 
    date;
    uptime;
    uname -a;
    echo "fim da função"
}

2º) Segunda forma de declarar uma função:

$function funcao2 { date; uptime; }       (outra forma de definir uma função)

$funcao2 
qua jun 13 07:35:18 -03 2018
 07:35:18 up 49 min,  1 user,  load average: 0,69, 0,55, 0,48

3º) Terceira forma de se declarar uma função:

$funcao3 () { uptime; uname -v; hostname; }       (outra forma de se definir função, sem usar o comando function)

$funcao3
07:37:52 up 52 min,  1 user,  load average: 0,48, 0,55, 0,49
25-Ubuntu SMP Wed May 23 18:02:16 UTC 2018
wk2001876


#listas (arrays em shell) 

$lista=(valor1 valor2 valor3 valor 4)       (criando uma lista em shell chamada lista)

$set | grep lista (usando o comando set para mostrar essa lista)
lista=([0]="valor1" [1]="valor2" [2]="valor3" [3]="valor" [4]="4")

$echo ${lista[2]}     (usando o comando echo para mostrar os valores dessa lista, sempre começa de 0, então ele mostrou o valor 3)
valor3

$array=(A B C D)      (criando uma lista)

$echo ${array[3]}    (mostrando o valor dessa lista)
D

$set | grep array
BASH_REMATCH=([0]="\${array[3" [1]="\${" [2]="array" [3]="3")
array=([0]="A" [1]="B" [2]="C" [3]="D")

OBS: essas listas mostram apenas com o comando set, não está exportado.

$unset array (para apagar essa lista usamos o comando unset)


### Customização do ambiente shell:


- declarar uma variavel sempre que eu fizer login no sistema
- uma função ficar sempre disponível para um usuário ou para todos os usuários
- pode fazer essas configurações globalmente (aplicadas para todos os usuários, todo o ambiente) ou para cada usuário.
- isso é feito através de arquivos, onde se pode incluir as configurações para que seja carregado toda vez que faça login.

-- "arquivos que aplicam configurações para todos usuários:"

- entendendo o conceito de login e sessão (toda vez que eu faço o procedimento de login, eu abro um novo terminal, mas nem toda vez que eu abro uma nova sessão, um novo bash, eu não tô fazendo o procedimento de login)

#/etc/profile (utilizado quando se faz o procedimento de login, quando o usuário loga na interface gráfica)

- é aqui que se inclui um alias para todos usuários, uma função que seja carregada no momento do login. 
- como exemplo, foi definida uma variavel chamada ETCPROFILE=valor2 no /etc/profile

$echo $ETCPROFILE (aparece quando eu faço login no sistema)

- se eu abrir um novo terminal essa variavel não estara acessível porque eu não fiz procedimento de login, para testar,
eu realizo o procedimento de login com (ctrl-alt+F2) e digito $echo $ETCPROFILE e a variavel é mostrada.

#/etc/bash.bashrc (aplicado quando se abre um novo terminal, uma sessão do shell) bashrc (novo bash, novo shell)

- existem várias definições nesse arquivo.
- declarando a variavel BASHRCTESTE=valor2
- digitando dentro do terminal, $bash ele abre outro shell, digitando $echo  $BASHRCTESTE, ele mostra o valor, porque
ele abriu outro shell, nova aba tbm serve.

-- "arquivos que aplicam configurações para um usuário especifíco, para um usuário individual:"

- existem alguns arquivos no /home de cada usuário para que ele mesmo faça as alterações.
- "semelhante ao /etc/profile (novo login):"

/.bash_profile
/.bash_login
/.profile (definições pessoais que serão aplicadas em todo novo login) - posso adicionar um alias, uma função, uma variavel.

- sempre será nessa ordem, caso não tenha o 1º arquivo, ele segue para o 2º, caso não tenha ele vai para o último (/.profile)
- definindo um alias no arquivo /home/.profile alias tt="date; uptime"


- existem alguns arquivos no /home de cada usuário para que ele mesmo faça as alterações.
- "semelhante ao /etc/bash.bashrc (novo shell, nossa sessão):"

.bashrc (correspondente a uma nova sessão, novo shell e não login)




- o /home do usuário tbm tem outros arquivos importantes, que são:

.bash_logout (o que tem nesse arquivo será executado toda vez que o usuário fizer logout)

/etc/inputrc (definir comandos no terminal, definir o tipo de edição que o terminal aceita, vim, emacs)

/etc/skel (diretório no /etc todos os arquivos e diretórios que estão dentro do /etc/skel, vão ser fazer parte da base de novos usuários que serão criados no sistema, os arquivos vão ser colocados no /home do usuário que eu criar)

- se eu quiser adicionar uma configuração especifíca eu posso por no diretório /etc/skel, que ele vai criar para todos os usuários do sistema.




--Customização e Uso do Ambiente Shell - Descrição dos Arquivos


# Arquivos de configuração GLOBAIS, aplicados a todos os usuários:

/etc/profile: Arquivo de inicialização executado durante o processo de login de todos os usuários do sistema. Em caso de processo de login, será sempre o primeiro arquivo executado.

/etc/profile.d/: Todos os scripts presentes nesse diretório serão executados durante o processo de login de cada usuário do sistema.

/etc/bash.bashrc: Arquivo executado para toda nova sessão de shell bash, aplicado a todos os usuários. 

/etc/inputrc: Arquivo global utilizado para customização de opções do teclado e de comportamento do terminal.

/etc/skel/ : Todos os arquivos e diretórios presentes nesse diretório serão incluídos no diretório home de novos usuários criados no sistema.


# Arquivos de configuração LOCAIS, de cada usuário:

~/.bash_profile: Se existir, o arquivo é executado após o /etc/profile, durante o processo de login do usuário.

~/.bash_login: Se .bash_profile não existir, o arquivo é executado automaticamente durante o processo de login, após a execução do /etc/profile.

~/.profile: Não existindo .bash_profile e .bash_login, o arquivo é executado durante o login após a execução do /etc/profile.

~/.bashrc: Executado automaticamente em toda nova sessão de shell bash, logo após o /etc/bash.bashrc.

~/.inputrc: Implemente a nível de usuário vinculações de teclas e opções referentes ao terminal

~/.bash_logout: Arquivo executado durante o processo de logout do usuário

* As configurações globais são sempre executadas primeiro que as configurações locais. O que significa também que as locais podem "sobrescrever" as globais.

# Principais Variáveis de Ambiente

É importante conhecer a função de algumas variáveis de ambiente existentes no sistema, as principais são:

DISPLAY: Indica às aplicações gráficas onde as janelas deverão ser exibidas. Será estudado no Tópico 106

HISTFILE: Arquivo do histórico de comandos

HISTFILESIZE: Quantidade de linhas/comandos armazenados no arquivo de histórico

HOME: Indica o diretório do usuário atual

LANG: Definição do idioma

LOGNAME e USER: Nome do usuário atual

PATH: Diretórios em que o Linux irá procurar por arquivos executáveis

PS1: Aparência do prompt do shell.

PWD: Diretório atual

OLDPWD: Diretório anterior
